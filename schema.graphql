type Pools @entity(immutable: true) {
  id: Bytes! # 池子地址(主键)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  token0: Tokens! # 输入代币
  token1: Tokens! # 输出代币
  fee: Int! # uint24
}

type Positions @entity(immutable: true) {
  id: Bytes! # positionID(主键)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  tokenId: BigInt! # NFT token ID
  owner: Bytes! # 所有者
  token0: Tokens! # 输入代币
  token1: Tokens! # 输出代币
  changeType: String # 变更类型(mint/burn)
  liquidity: BigInt! # 流动性数量
  amount0: BigInt! # 代币数量
  amount1: BigInt! # 代币数量
  tickLower: Int! # 下界
  tickUpper: Int! # 上界
  fee: Int! # 手续费
}

type Swaps @entity(immutable: true) {
  id: Bytes! # 交易地址(主键)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  poolAddress: Bytes! # 池子地址
  sender: Bytes! # 发送者
  recipient: Bytes! # 接收者
  tokenIn: Bytes! # 输入代币
  tokenOut: Bytes! # 输出代币
  amountIn: BigInt! # 输入数量
  amountOut: BigInt! # 输出数量
  sqrtPrice: BigInt!
  liquidity: BigInt!
  tick: Int!
}

type Tokens @entity(immutable: false) {
  id: Bytes! # 代币地址(主键)
  name: String! # 代币名称
  symbol: String! # 代币符号
  decimals: Int! # 代币精度
  totalSupply: BigInt! # 代币总量
  totalVolumeUSD: BigDecimal! # 代币总交易量
  totalLiquidityUSD: BigDecimal! # 代币总流动性
}